""" Module with dsid <-> gluino/lsp masses mappings """

import argparse

__all__ = ['get_dsid', 'get_masses']


def get_dsid(m_gluino, m_lsp):
    """ Get DSID corresponding to Gtt sample with given masses

    Args:
      m_gluino: gluino mass
      m_lsp: LSP mass
    Returns:
      the corresponding DSID

    Raises:
      KeyError: no DSID corresponding to (m_gluino, m_lsp)
    """
    return DICT_BY_MASSES_[(m_gluino, m_lsp)]


def get_masses(dsid):
    """ Get masses corresponding to Gtt sample with given DSID

    Args:
      dsid: requested DSID
    Returns:
      tuple with (gluino mass, lsp mass) for given DSID

    Raises:
      KeyError: no (gluino mass, lsp mass) corresponding to dsid
    """
    return DICT_BY_DSID_[dsid]


DICT_BY_DSID_ = {
    370100: (900, 1),
    370101: (900, 200),
    370102: (900, 400),
    370103: (900, 545),
    370104: (1000, 1),
    370105: (1000, 200),
    370106: (1000, 400),
    370107: (1000, 600),
    370108: (1000, 645),
    370109: (1100, 1),
    370110: (1100, 200),
    370111: (1100, 400),
    370112: (1100, 600),
    370113: (1100, 745),
    370114: (1200, 1),
    370115: (1200, 100),
    370116: (1200, 200),
    370117: (1200, 400),
    370118: (1200, 600),
    370119: (1200, 700),
    370120: (1200, 800),
    370121: (1200, 845),
    370122: (1200, 855),
    370123: (1300, 1),
    370124: (1300, 200),
    370125: (1300, 400),
    370126: (1300, 600),
    370127: (1300, 800),
    370128: (1300, 945),
    370129: (1400, 1),
    370130: (1400, 100),
    370131: (1400, 200),
    370132: (1400, 400),
    370133: (1400, 600),
    370134: (1400, 800),
    370135: (1400, 1000),
    370136: (1400, 1045),
    370137: (1500, 1),
    370138: (1500, 200),
    370139: (1500, 400),
    370140: (1500, 600),
    370141: (1500, 800),
    370142: (1500, 1000),
    370143: (1500, 1145),
    370144: (1600, 1),
    370145: (1600, 200),
    370146: (1600, 400),
    370147: (1600, 600),
    370148: (1600, 800),
    370149: (1600, 1000),
    370150: (1600, 1200),
    370151: (1600, 1245),
    370152: (1700, 1),
    370153: (1700, 200),
    370154: (1700, 400),
    370155: (1700, 600),
    370156: (1700, 800),
    370157: (1700, 1000),
    370158: (1700, 1200),
    370159: (1700, 1345),
    370160: (1800, 1),
    370161: (1800, 200),
    370162: (1800, 400),
    370163: (1800, 600),
    370164: (1800, 800),
    370165: (1800, 1000),
    370166: (1800, 1200),
    370167: (1800, 1400),
    370168: (1800, 1445),
    370169: (1900, 1),
    370170: (1900, 200),
    370171: (1900, 400),
    370172: (1900, 600),
    370173: (1900, 800),
    370174: (1900, 1000),
    370175: (1900, 1200),
    370176: (1900, 1400),
    370177: (1900, 1545),
    370178: (2000, 1),
    370179: (2000, 200),
    370180: (2000, 400),
    370181: (2000, 600),
    370182: (2000, 800),
    370183: (2000, 1000),
    370184: (2000, 1200),
    370185: (2000, 1400),
    370186: (2000, 1600),
    370187: (2000, 1645),
    370239: (2100, 1),
    370240: (2100, 200),
    370241: (2100, 400),
    370243: (2100, 800),
    370244: (2100, 1000),
    370245: (2100, 1200),
    370246: (2100, 1400),
    370247: (2100, 1600),
    370248: (2100, 1745),
    370249: (2200, 1),
    373420: (2200, 200),
    373421: (2200, 400),
    373422: (2200, 600),
    373423: (2200, 800),
    373424: (2200, 1000),
    373425: (2200, 1200),
    373426: (2200, 1400),
    373427: (2200, 1600),
    373428: (2200, 1800),
    373429: (2300, 1),
    373430: (2300, 200),
    373431: (2300, 400),
    373432: (2300, 600),
    373433: (2300, 800),
    373434: (2300, 1000),
    373435: (2300, 1200),
    373436: (2300, 1400),
    373437: (2300, 1600),
    373438: (2300, 1800),
    373439: (2400, 1),
    373440: (2400, 200),
    373441: (2400, 400),
    373442: (2400, 600),
    373443: (2400, 800),
    373444: (2400, 1000),
    373445: (2400, 1200),
    373446: (2400, 1400),
    373447: (2400, 1600),
    373448: (2400, 2000),
    370242: (2100, 600),
}

DICT_BY_MASSES_ = dict((v, k) for k, v in DICT_BY_DSID_.iteritems())


def main_():
    """ CLI interface """
    argp = argparse.ArgumentParser()
    grp = argp.add_mutually_exclusive_group(required=True)
    grp.add_argument('--dsid', type=int)
    grp.add_argument('--masses', nargs=2, type=int)
    args = argp.parse_args()

    if args.dsid is not None:
        mgl, mlsp = get_masses(args.dsid)
        print "{} {}".format(mgl, mlsp)
    elif args.masses is not None:
        print get_dsid(args.masses[0], args.masses[1])

    return 0
